{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shana\\\\OneDrive\\\\Desktop\\\\task\\\\todo-list\\\\src\\\\Components\\\\ToDoInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDoInput(_ref) {\n  _s();\n\n  let {\n    addTask\n  } = _ref;\n  const [newTask, setNewTask] = useState(''); //  Function handles the local state’s changes. Every time a user types in the input box, the state will change to reflect the most recent input.\n\n  const handleChange = e => {\n    setNewTask(e.currentTarget.value);\n  }; // Add tasks to todolist array\n  // e.preventDefault() in forms prevents the default action from taking place. \n  // Prevents the reloading of the page and everything changed will go back to how it initially rendered.\n  //userInput set back to an empty string after the addTask function has run. This will set the form back to an empty input.\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addTask(newTask);\n    setNewTask(\"\"); // Sets form back to empty after addTask function has run.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: newTask,\n      type: \"text\",\n      onChange: handleChange,\n      placeholder: \"What do you need to do?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToDoInput, \"dwrfxUhk8xVI/9U/IrHsP3jOUJs=\");\n\n_c = ToDoInput;\n;\nexport default ToDoInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoInput\");","map":{"version":3,"names":["React","useState","ToDoInput","addTask","newTask","setNewTask","handleChange","e","currentTarget","value","handleSubmit","preventDefault"],"sources":["C:/Users/shana/OneDrive/Desktop/task/todo-list/src/Components/ToDoInput.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction ToDoInput ({ addTask }) {\r\n\r\n    const [ newTask, setNewTask ] = useState('');\r\n\r\n    //  Function handles the local state’s changes. Every time a user types in the input box, the state will change to reflect the most recent input.\r\n    const handleChange = (e) => {\r\n        setNewTask(e.currentTarget.value)\r\n    };\r\n    \r\n    // Add tasks to todolist array\r\n    // e.preventDefault() in forms prevents the default action from taking place. \r\n    // Prevents the reloading of the page and everything changed will go back to how it initially rendered.\r\n    //userInput set back to an empty string after the addTask function has run. This will set the form back to an empty input.\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addTask(newTask);\r\n        setNewTask(\"\"); // Sets form back to empty after addTask function has run.\r\n    };\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            {/* Value of input element matches the name of the state variable. */}\r\n            {/* The change handler takes the value here and sets the state every time it changes. */}\r\n            <input value={newTask} type=\"text\" onChange={handleChange} placeholder=\"What do you need to do?\"/>\r\n            <button>Add Task</button>\r\n        </form>    \r\n    );\r\n};  \r\n\r\nexport default ToDoInput;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,SAAT,OAAiC;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAE7B,MAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC,CAF6B,CAI7B;;EACA,MAAMK,YAAY,GAAIC,CAAD,IAAO;IACxBF,UAAU,CAACE,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAV;EACH,CAFD,CAL6B,CAS7B;EACA;EACA;EACA;;;EACA,MAAMC,YAAY,GAAIH,CAAD,IAAO;IACxBA,CAAC,CAACI,cAAF;IACAR,OAAO,CAACC,OAAD,CAAP;IACAC,UAAU,CAAC,EAAD,CAAV,CAHwB,CAGR;EACnB,CAJD;;EAMA,oBAEI;IAAM,QAAQ,EAAEK,YAAhB;IAAA,wBAGI;MAAO,KAAK,EAAEN,OAAd;MAAuB,IAAI,EAAC,MAA5B;MAAmC,QAAQ,EAAEE,YAA7C;MAA2D,WAAW,EAAC;IAAvE;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA;IAAA;IAAA;IAAA;EAAA,QAFJ;AASH;;GA5BQJ,S;;KAAAA,S;AA4BR;AAED,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}