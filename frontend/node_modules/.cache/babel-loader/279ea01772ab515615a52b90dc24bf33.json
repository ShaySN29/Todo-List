{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shana\\\\OneDrive\\\\Desktop\\\\task\\\\todo-list\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'; // Import Components\n\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport Login from './Components/Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCreateUserButtonClick = this.handleCreateUserButtonClick.bind(this);\n    this.handleLoginButtonClick = this.handleLoginButtonClick.bind(this);\n    this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    this.state = {\n      error: null,\n      username: \"\",\n      password: \"\",\n      token: \"\",\n      loggedIn: false\n    };\n  }\n\n  // Functions below sets the state of the username and password to the value that the user has entered\n  handleUserNameChange(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  handlePasswordChange(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  // Function below invoked when the user clicks the login button. The jwt is fetched and stored in state and loggedin set to true\n  handleLoginButtonClick() {\n    fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    }).then(res => res.json()).then(response => {\n      this.setState({\n        loggedIn: true,\n        token: response.token\n      });\n      alert('The user has been logged in', response.token);\n    }).catch(error => console.log('Error:', error));\n  }\n\n  handleCreateUserButtonClick() {\n    fetch(\"http://localhost:8000/add\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    }).then(res => res.json()).then(response => {\n      alert('The user has been added. Please Log In');\n    }).catch(error => console.log('Error:', error));\n  }\n\n  render() {\n    const {\n      loggedIn\n    } = this.state;\n\n    if (!loggedIn) {\n      return /*#__PURE__*/_jsxDEV(Login, {\n        handleUserNameChange: this.handleUserNameChange,\n        handlePasswordChange: this.handlePasswordChange,\n        handleCreateUserButtonClick: this.handleCreateUserButtonClick,\n        handleLoginButtonClick: this.handleLoginButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoListDiv\",\n        children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default App;\n/*\nfunction App() {\n  // Array of objects containing the tasks with a ID and complete status\n  const toDoData = [];\n  const [toDoList, setToDoList] = useState(toDoData);\n\n  \n\n  \n\n  // Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n  // Makes a copy of the toDoList so the state is not directly manipulated.\n  // The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end\n  const addTask = (newTask) => {\n    let copy = [...toDoList];\n    copy.push({id: toDoList.length + 1, task: newTask, complete: false });    \n    setToDoList(copy);\n  }\n\n  // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n  const toggleToDo = (id) => {\n    let copy =[...toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    setToDoList(copy);\n  }\n\n  // Function clears the completed items from the todoList\n  function handleClearCompleted() {\n    // alert(\"Button Clicked\");\n    const uncompletedToDos = toDoList.filter(todo => !todo.complete);\n    setToDoList(uncompletedToDos);\n  }\n\n \n\n  function handleCreateUserButtonClick() {\n    alert(\"clicked\")\n  }\n  \n  \n};\n\nexport default App;\n*/\n// I used this youtube video: https://www.youtube.com/watch?v=hQAHSlTtcmY : \"Learn React in 30 minutes\" by Web Dev simplified\n// and this https://www.educative.io/blog/react-hooks-tutorial-todo-list react hooks todolist blog to assist me in this task","map":{"version":3,"names":["React","Component","Header","ToDoList","ToDoInput","Login","App","constructor","props","handleUserNameChange","bind","handlePasswordChange","handleCreateUserButtonClick","handleLoginButtonClick","handleClearCompleted","state","error","username","password","token","loggedIn","e","setState","target","value","fetch","method","headers","body","JSON","stringify","then","res","json","response","alert","catch","console","log","render"],"sources":["C:/Users/shana/OneDrive/Desktop/task/todo-list/frontend/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Import Components\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport Login from './Components/Login';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCreateUserButtonClick = this.handleCreateUserButtonClick.bind(this);\n    this.handleLoginButtonClick = this.handleLoginButtonClick.bind(this);\n    this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    this.state = {\n      error: null,\n      username: \"\",\n      password: \"\",\n      token: \"\",\n      loggedIn: false,\n    };\n  };\n\n  // Functions below sets the state of the username and password to the value that the user has entered\n  handleUserNameChange(e) {\n    this.setState({username: e.target.value})\n  };\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value})\n  };\n\n  // Function below invoked when the user clicks the login button. The jwt is fetched and stored in state and loggedin set to true\n  handleLoginButtonClick() {\n    fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      this.setState({loggedIn:true, token:response.token})\n      alert('The user has been logged in', response.token)\n    })\n    .catch(error => console.log('Error:', error))\n  };\n\n  handleCreateUserButtonClick() {\n    fetch(\"http://localhost:8000/add\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      alert('The user has been added. Please Log In');\n    })\n    .catch(error => console.log('Error:', error))\n  };\n\n  render() {\n    const { loggedIn } = this.state;\n\n    if (!loggedIn) {\n      return (\n        <Login\n          handleUserNameChange={this.handleUserNameChange}\n          handlePasswordChange={this.handlePasswordChange}\n          handleCreateUserButtonClick={this.handleCreateUserButtonClick}\n          handleLoginButtonClick={this.handleLoginButtonClick}\n        />\n      )\n    } else {\n      return (  \n        <div className='todoListDiv'>\n            <Header />\n            \n            {/* <ToDoInput addTask={addTask}/> */}\n            {/* <button onClick={handleClearCompleted}>Clear Completed</button> */}\n            {/* <ToDoList toDoList={toDoList} toggleToDo={toggleToDo}/> */}\n        </div>\n      )\n    }\n  };\n}\n\nexport default App;\n\n\n/*\nfunction App() {\n  // Array of objects containing the tasks with a ID and complete status\n  const toDoData = [];\n  const [toDoList, setToDoList] = useState(toDoData);\n\n  \n\n  \n\n  // Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n  // Makes a copy of the toDoList so the state is not directly manipulated.\n  // The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end\n  const addTask = (newTask) => {\n    let copy = [...toDoList];\n    copy.push({id: toDoList.length + 1, task: newTask, complete: false });    \n    setToDoList(copy);\n  }\n\n  // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n  const toggleToDo = (id) => {\n    let copy =[...toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    setToDoList(copy);\n  }\n\n  // Function clears the completed items from the todoList\n  function handleClearCompleted() {\n    // alert(\"Button Clicked\");\n    const uncompletedToDos = toDoList.filter(todo => !todo.complete);\n    setToDoList(uncompletedToDos);\n  }\n\n \n\n  function handleCreateUserButtonClick() {\n    alert(\"clicked\")\n  }\n  \n  \n};\n\nexport default App;\n*/\n// I used this youtube video: https://www.youtube.com/watch?v=hQAHSlTtcmY : \"Learn React in 30 minutes\" by Web Dev simplified\n// and this https://www.educative.io/blog/react-hooks-tutorial-todo-list react hooks todolist blog to assist me in this task"],"mappings":"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"},"metadata":{},"sourceType":"module"}