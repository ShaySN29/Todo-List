{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shana\\\\OneDrive\\\\Desktop\\\\task\\\\todo-list\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css'; // Import Components\n\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Array of objects containing the tasks with a ID and complete status\n  const toDoData = [];\n  const [toDoList, setToDoList] = useState(toDoData);\n  const [loggedIn, setLoggedIn] = useState(false); // Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n  // Makes a copy of the toDoList so the state is not directly manipulated.\n  // The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end\n\n  const addTask = newTask => {\n    let copy = [...toDoList];\n    copy.push({\n      id: toDoList.length + 1,\n      task: newTask,\n      complete: false\n    });\n    setToDoList(copy);\n  }; // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n\n\n  const toggleToDo = id => {\n    let copy = [...toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    setToDoList(copy);\n  }; // Function clears the completed items from the todoList\n\n\n  function handleClearCompleted() {\n    // alert(\"Button Clicked\");\n    const uncompletedToDos = toDoList.filter(todo => !todo.complete);\n    setToDoList(uncompletedToDos);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"if(!loggedIn) \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Login \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          this.setState({\n            name: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: e => {\n          this.setState({\n            password: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          this.login();\n        },\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }, this), \" else \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todoListDiv\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToDoInput, {\n        addTask: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClearCompleted,\n        children: \"Clear Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n        toDoList: toDoList,\n        toggleToDo: toggleToDo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hy0QfcJW2ge85CbfTQz0/wDuea8=\");\n\n_c = App;\n;\nexport default App; // I used this youtube video: https://www.youtube.com/watch?v=hQAHSlTtcmY : \"Learn React in 30 minutes\" by Web Dev simplified\n// and this https://www.educative.io/blog/react-hooks-tutorial-todo-list react hooks todolist blog to assist me in this task\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","ToDoList","ToDoInput","App","toDoData","toDoList","setToDoList","loggedIn","setLoggedIn","addTask","newTask","copy","push","id","length","task","complete","toggleToDo","todoList","find","handleClearCompleted","uncompletedToDos","filter","todo","e","setState","name","target","value","password","login"],"sources":["C:/Users/shana/OneDrive/Desktop/task/todo-list/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n// Import Components\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\n\nfunction App() {\n  // Array of objects containing the tasks with a ID and complete status\n  const toDoData = [];\n\n  const [toDoList, setToDoList] = useState(toDoData);\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  // Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n  // Makes a copy of the toDoList so the state is not directly manipulated.\n  // The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end\n  const addTask = (newTask) => {\n    let copy = [...toDoList];\n    copy.push({id: toDoList.length + 1, task: newTask, complete: false });    \n    setToDoList(copy);\n  }\n\n  // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n  const toggleToDo = (id) => {\n    let copy =[...toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    setToDoList(copy);\n  }\n\n  // Function clears the completed items from the todoList\n  function handleClearCompleted() {\n    // alert(\"Button Clicked\");\n    const uncompletedToDos = toDoList.filter(todo => !todo.complete);\n    setToDoList(uncompletedToDos);\n  }\n  \n  return (\n    <div>\n      if(!loggedIn) {\n         <div>\n         <h1> Login </h1>\n         <input type=\"text\" onChange={(e) => { this.setState({ name: e.target.value }) }} />\n         <br />\n         <input type=\"password\" onChange={(e) => { this.setState({ password: e.target.value }) }} />\n         <br />\n         <button onClick={() => { this.login() }}>Login</button>\n       </div>\n      } else {\n      <div className='todoListDiv'>\n        <Header />\n        {/* Passing toDoList as a prop to toDoList component */}\n        <ToDoInput addTask={addTask}/>\n        <button onClick={handleClearCompleted}>Clear Completed</button>\n        <ToDoList toDoList={toDoList} toggleToDo={toggleToDo}/>\n      </div>\n  }\n    </div>\n  );\n};\n\nexport default App;\n\n// I used this youtube video: https://www.youtube.com/watch?v=hQAHSlTtcmY : \"Learn React in 30 minutes\" by Web Dev simplified\n// and this https://www.educative.io/blog/react-hooks-tutorial-todo-list react hooks todolist blog to assist me in this task"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA,MAAMC,QAAQ,GAAG,EAAjB;EAEA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACK,QAAD,CAAxC;EACA,MAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC,CALa,CAOb;EACA;EACA;;EACA,MAAMU,OAAO,GAAIC,OAAD,IAAa;IAC3B,IAAIC,IAAI,GAAG,CAAC,GAAGN,QAAJ,CAAX;IACAM,IAAI,CAACC,IAAL,CAAU;MAACC,EAAE,EAAER,QAAQ,CAACS,MAAT,GAAkB,CAAvB;MAA0BC,IAAI,EAAEL,OAAhC;MAAyCM,QAAQ,EAAE;IAAnD,CAAV;IACAV,WAAW,CAACK,IAAD,CAAX;EACD,CAJD,CAVa,CAgBb;EACA;;;EACA,MAAMM,UAAU,GAAIJ,EAAD,IAAQ;IACzB,IAAIF,IAAI,GAAE,CAAC,GAAGN,QAAJ,CAAV;IACA,MAAMa,QAAQ,GAAGP,IAAI,CAACQ,IAAL,CAAUD,QAAQ,IAAIA,QAAQ,CAACL,EAAT,KAAgBA,EAAtC,CAAjB;IACAK,QAAQ,CAACF,QAAT,GAAoB,CAACE,QAAQ,CAACF,QAA9B;IACAV,WAAW,CAACK,IAAD,CAAX;EACD,CALD,CAlBa,CAyBb;;;EACA,SAASS,oBAAT,GAAgC;IAC9B;IACA,MAAMC,gBAAgB,GAAGhB,QAAQ,CAACiB,MAAT,CAAgBC,IAAI,IAAI,CAACA,IAAI,CAACP,QAA9B,CAAzB;IACAV,WAAW,CAACe,gBAAD,CAAX;EACD;;EAED,oBACE;IAAA,0CAEK;MAAA,wBACA;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADA,eAEA;QAAO,IAAI,EAAC,MAAZ;QAAmB,QAAQ,EAAGG,CAAD,IAAO;UAAE,KAAKC,QAAL,CAAc;YAAEC,IAAI,EAAEF,CAAC,CAACG,MAAF,CAASC;UAAjB,CAAd;QAAyC;MAA/E;QAAA;QAAA;QAAA;MAAA,QAFA,eAGA;QAAA;QAAA;QAAA;MAAA,QAHA,eAIA;QAAO,IAAI,EAAC,UAAZ;QAAuB,QAAQ,EAAGJ,CAAD,IAAO;UAAE,KAAKC,QAAL,CAAc;YAAEI,QAAQ,EAAEL,CAAC,CAACG,MAAF,CAASC;UAArB,CAAd;QAA6C;MAAvF;QAAA;QAAA;QAAA;MAAA,QAJA,eAKA;QAAA;QAAA;QAAA;MAAA,QALA,eAMA;QAAQ,OAAO,EAAE,MAAM;UAAE,KAAKE,KAAL;QAAc,CAAvC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFL,yBAWE;MAAK,SAAS,EAAC,aAAf;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAGE,QAAC,SAAD;QAAW,OAAO,EAAErB;MAApB;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE;QAAQ,OAAO,EAAEW,oBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF,eAKE,QAAC,QAAD;QAAU,QAAQ,EAAEf,QAApB;QAA8B,UAAU,EAAEY;MAA1C;QAAA;QAAA;QAAA;MAAA,QALF;IAAA;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAsBD;;GAtDQd,G;;KAAAA,G;AAsDR;AAED,eAAeA,GAAf,C,CAEA;AACA"},"metadata":{},"sourceType":"module"}