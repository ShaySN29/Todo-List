{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shana\\\\OneDrive\\\\Desktop\\\\task\\\\todo-list\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Button } from 'react-bootstrap'; // Import Components\n\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport Login from './Components/Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addTask = newTask => {\n      let copy = [...this.state.toDoList];\n      copy.push({\n        id: this.state.toDoList.length + 1,\n        task: newTask,\n        complete: false\n      });\n      this.setState({\n        toDoList: copy\n      });\n    };\n\n    this.toggleToDo = id => {\n      let copy = [...this.state.toDoList];\n      const todoList = copy.find(todoList => todoList.id === id);\n      todoList.complete = !todoList.complete;\n      this.setState({\n        toDoList: copy\n      });\n    };\n\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCreateUserButtonClick = this.handleCreateUserButtonClick.bind(this);\n    this.handleLoginButtonClick = this.handleLoginButtonClick.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    this.toggleToDo = this.toggleToDo.bind(this);\n    this.saveToDoList = this.saveToDoList.bind(this);\n    this.getToDoListFromDatabase = this.getToDoListFromDatabase.bind(this);\n    this.state = {\n      error: null,\n      username: \"\",\n      password: \"\",\n      token: \"\",\n      loggedIn: false,\n      toDoList: []\n    };\n  }\n\n  // Functions below sets the state of the username and password to the value that the user has entered\n  handleUserNameChange(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  handlePasswordChange(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  // Function below invoked when the user clicks the login button. The jwt is fetched and stored in state and loggedin set to true\n  handleLoginButtonClick() {\n    fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    }).then(res => res.json()).then(response => {\n      this.setState({\n        loggedIn: true,\n        token: response.token\n      });\n    }).catch(error => console.log('Error:', error));\n  }\n\n  // Function invoked when the user clicks the add user button. New user is added to the database\n  handleCreateUserButtonClick() {\n    fetch(\"http://localhost:8000/add\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    }).then(res => res.json()).then(response => {\n      alert('The user has been added. Please Log In', JSON.stringify(response));\n    }).catch(error => console.log('Error:', error));\n  }\n\n  // Function clears the completed items from the todoList\n  handleClearCompleted() {\n    const uncompletedToDos = this.state.toDoList.filter(todo => !todo.complete);\n    this.setState({\n      toDoList: uncompletedToDos\n    });\n  }\n\n  // Get TodoList\n  getToDoListFromDatabase() {\n    fetch(\"http://localhost:8000/gettodolist\", {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": \"Bearer \" + this.state.token\n      }\n    }).then(res => res.json()).then(result => {\n      this.setState({\n        toDoList: result\n      });\n    }, error => {\n      this.setState({\n        error\n      });\n    });\n  }\n\n  // Function saves the todolist in the database\n  saveToDoList() {\n    fetch(\"http://localhost:8000/savetodo\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.state.token\n      },\n      body: JSON.stringify({\n        todoList: this.state.toDoList\n      })\n    }).then(res => res.json()).then(response => {\n      alert(\"Your ToDo List has been saved!\", JSON.stringify(response));\n    }).catch(error => console.log(\"Error\", error));\n  }\n\n  render() {\n    const {\n      loggedIn,\n      toDoList\n    } = this.state;\n\n    if (!loggedIn) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loginDiv\",\n        children: /*#__PURE__*/_jsxDEV(Login, {\n          handleUserNameChange: this.handleUserNameChange,\n          handlePasswordChange: this.handlePasswordChange,\n          handleCreateUserButtonClick: this.handleCreateUserButtonClick,\n          handleLoginButtonClick: this.handleLoginButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoListDiv\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ToDoInput, {\n          addTask: this.addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ToDoList, {\n          toDoList: toDoList,\n          toggleToDo: this.toggleToDo,\n          getToDoListFromDatabase: this.getToDoListFromDatabase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-dark\",\n          onClick: this.handleClearCompleted,\n          children: \"Clear Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-dark\",\n          onClick: this.saveToDoList,\n          children: \"Save ToDo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"names":["React","Component","Button","Header","ToDoList","ToDoInput","Login","App","constructor","props","addTask","newTask","copy","state","toDoList","push","id","length","task","complete","setState","toggleToDo","todoList","find","handleUserNameChange","bind","handlePasswordChange","handleCreateUserButtonClick","handleLoginButtonClick","handleClearCompleted","saveToDoList","getToDoListFromDatabase","error","username","password","token","loggedIn","e","target","value","fetch","method","headers","body","JSON","stringify","then","res","json","response","catch","console","log","alert","uncompletedToDos","filter","todo","result","render"],"sources":["C:/Users/shana/OneDrive/Desktop/task/todo-list/frontend/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Button} from 'react-bootstrap';\n// Import Components\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport Login from './Components/Login';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCreateUserButtonClick = this.handleCreateUserButtonClick.bind(this);\n    this.handleLoginButtonClick = this.handleLoginButtonClick.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    this.toggleToDo = this.toggleToDo.bind(this);\n    this.saveToDoList = this.saveToDoList.bind(this);\n    this.getToDoListFromDatabase = this.getToDoListFromDatabase.bind(this);\n    this.state = {\n      error: null,\n      username: \"\",\n      password: \"\",\n      token: \"\",\n      loggedIn: false,\n      toDoList: []\n    };\n  };\n\n  // Functions below sets the state of the username and password to the value that the user has entered\n  handleUserNameChange(e) {\n    this.setState({username: e.target.value})\n  };\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value})\n  };\n\n  // Function below invoked when the user clicks the login button. The jwt is fetched and stored in state and loggedin set to true\n  handleLoginButtonClick() {\n    fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      this.setState({loggedIn:true, token:response.token})\n    })\n    .catch(error => console.log('Error:', error))\n  };\n\n  // Function invoked when the user clicks the add user button. New user is added to the database\n  handleCreateUserButtonClick() {\n    fetch(\"http://localhost:8000/add\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      alert('The user has been added. Please Log In', JSON.stringify(response));\n    })\n    .catch(error => console.log('Error:', error))\n  };\n\n  /*Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n    Makes a copy of the toDoList so the state is not directly manipulated.\n    The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end \n  */\n  addTask = (newTask) => {\n    let copy = [...this.state.toDoList];\n    copy.push({ id: this.state.toDoList.length + 1, task: newTask, complete: false });\n    this.setState({toDoList:copy});\n  };\n\n  // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n  toggleToDo = (id) => {\n    let copy =[...this.state.toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    this.setState({ toDoList: copy });\n  }\n\n  // Function clears the completed items from the todoList\n  handleClearCompleted() {\n    const uncompletedToDos = this.state.toDoList.filter(todo => !todo.complete);\n    this.setState({toDoList:uncompletedToDos});\n  };\n\n  // Get TodoList\n  getToDoListFromDatabase() {\n    fetch(\"http://localhost:8000/gettodolist\", {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": \"Bearer \" + this.state.token\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            toDoList: result\n          });\n        },\n        (error) => {\n          this.setState({\n            error\n          });\n        }\n      );\n  };\n\n  // Function saves the todolist in the database\n  saveToDoList() {\n    fetch(\"http://localhost:8000/savetodo\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + this.state.token\n      },\n      body: JSON.stringify({\n        todoList: this.state.toDoList\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      alert(\"Your ToDo List has been saved!\", JSON.stringify(response))\n    })\n    .catch(error => console.log(\"Error\", error));\n  };\n\n  render() {\n    const { loggedIn, toDoList } = this.state;\n\n    if (!loggedIn) {\n      return (\n        <div id='loginDiv'>\n        <Login\n          handleUserNameChange={this.handleUserNameChange}\n          handlePasswordChange={this.handlePasswordChange}\n          handleCreateUserButtonClick={this.handleCreateUserButtonClick}\n          handleLoginButtonClick={this.handleLoginButtonClick}\n          />\n          </div>\n      )\n    } else {\n      return (  \n        <div className='todoListDiv'>\n            <Header />\n            <ToDoInput addTask={this.addTask}/>\n          <ToDoList toDoList={toDoList} toggleToDo={this.toggleToDo} getToDoListFromDatabase={this.getToDoListFromDatabase}/>\n          <Button variant='outline-dark' onClick={this.handleClearCompleted}>Clear Completed</Button>\n          <Button variant='outline-dark' onClick={this.saveToDoList}>Save ToDo List</Button>\n        </div>\n      )\n    }\n  };\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}