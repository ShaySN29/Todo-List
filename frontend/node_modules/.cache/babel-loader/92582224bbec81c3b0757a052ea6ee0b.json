{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shana\\\\OneDrive\\\\Desktop\\\\task\\\\todo-list\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'; // Import Components\n\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport Login from './Components/Login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCreateUserButtonClick = this.handleCreateUserButtonClick.bind(this);\n    this.handleLoginButtonClick = this.handleLoginButtonClick.bind(this);\n    this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    this.state = {\n      error: null,\n      username: \"\",\n      password: \"\",\n      token: \"\",\n      loggedIn: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n/*\nfunction App() {\n  // Array of objects containing the tasks with a ID and complete status\n  const toDoData = [];\n  const [toDoList, setToDoList] = useState(toDoData);\n\n  // Functions below sets the state of the username and password to the value that the user has entered\n  function handleUserNameChange(e) {\n    setUsername(e.target.value)\n  };\n\n  function handlePasswordChange(e) {\n    setPassword(e.target.value)\n  };\n\n  // Function below invoked when the user clicks the login button. The jwt is fetched and stored in state and loggedin set to true\n  function handleLoginButtonClick() {\n    fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      JSON.stringify(setLoggedIn(true), setToken(response.token))\n      alert('The user has been logged in')\n    })\n    .catch(error => console.log('Error:', error))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n  // Makes a copy of the toDoList so the state is not directly manipulated.\n  // The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end\n  const addTask = (newTask) => {\n    let copy = [...toDoList];\n    copy.push({id: toDoList.length + 1, task: newTask, complete: false });    \n    setToDoList(copy);\n  }\n\n  // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n  const toggleToDo = (id) => {\n    let copy =[...toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    setToDoList(copy);\n  }\n\n  // Function clears the completed items from the todoList\n  function handleClearCompleted() {\n    // alert(\"Button Clicked\");\n    const uncompletedToDos = toDoList.filter(todo => !todo.complete);\n    setToDoList(uncompletedToDos);\n  }\n\n \n\n  function handleCreateUserButtonClick() {\n    alert(\"clicked\")\n  }\n  \n  if (!loggedIn) {\n    return (\n      <Login\n        handleUserNameChange={handleUserNameChange}\n        handlePasswordChange={handlePasswordChange}\n        handleCreateUserButtonClick={handleCreateUserButtonClick}\n        handleLoginButtonClick={handleLoginButtonClick}\n      />\n    )\n  } else {\n    return (  \n      <div className='todoListDiv'>\n          <Header />\n          \n          <ToDoInput addTask={addTask}/>\n          <button onClick={handleClearCompleted}>Clear Completed</button>\n          <ToDoList toDoList={toDoList} toggleToDo={toggleToDo}/>\n      </div>\n    )\n  }\n};\n\nexport default App;\n*/\n// I used this youtube video: https://www.youtube.com/watch?v=hQAHSlTtcmY : \"Learn React in 30 minutes\" by Web Dev simplified\n// and this https://www.educative.io/blog/react-hooks-tutorial-todo-list react hooks todolist blog to assist me in this task","map":{"version":3,"names":["React","Component","Header","ToDoList","ToDoInput","Login","App","constructor","props","handleUserNameChange","bind","handlePasswordChange","handleCreateUserButtonClick","handleLoginButtonClick","handleClearCompleted","state","error","username","password","token","loggedIn","render"],"sources":["C:/Users/shana/OneDrive/Desktop/task/todo-list/frontend/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Import Components\nimport Header from './Components/Header';\nimport ToDoList from './Components/ToDoList';\nimport ToDoInput from './Components/ToDoInput';\nimport Login from './Components/Login';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCreateUserButtonClick = this.handleCreateUserButtonClick.bind(this);\n    this.handleLoginButtonClick = this.handleLoginButtonClick.bind(this);\n    this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    this.state = {\n      error: null,\n      username: \"\",\n      password: \"\",\n      token: \"\",\n      loggedIn: false,\n    };\n  };\n\n\n\n  render() {\n    return (\n      <div>App</div>\n    )\n  }\n}\n\nexport default App;\n\n\n/*\nfunction App() {\n  // Array of objects containing the tasks with a ID and complete status\n  const toDoData = [];\n  const [toDoList, setToDoList] = useState(toDoData);\n\n  // Functions below sets the state of the username and password to the value that the user has entered\n  function handleUserNameChange(e) {\n    setUsername(e.target.value)\n  };\n\n  function handlePasswordChange(e) {\n    setPassword(e.target.value)\n  };\n\n  // Function below invoked when the user clicks the login button. The jwt is fetched and stored in state and loggedin set to true\n  function handleLoginButtonClick() {\n    fetch(\"http://localhost:8000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      }),\n    })\n    .then(res => res.json())\n    .then(response => {\n      JSON.stringify(setLoggedIn(true), setToken(response.token))\n      alert('The user has been logged in')\n    })\n    .catch(error => console.log('Error:', error))\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Takes in newTask (input by user) from AddTaskToToDoList component’s state. \n  // Makes a copy of the toDoList so the state is not directly manipulated.\n  // The copy is reassigned to a new array, with copy spread in and the new list item tagged on the end\n  const addTask = (newTask) => {\n    let copy = [...toDoList];\n    copy.push({id: toDoList.length + 1, task: newTask, complete: false });    \n    setToDoList(copy);\n  }\n\n  // Function to toggle the checkbox of the todo item. \n  // A copy of the list is created. The id of the selected task is found and the status of the completed is toggled\n  const toggleToDo = (id) => {\n    let copy =[...toDoList];\n    const todoList = copy.find(todoList => todoList.id === id);\n    todoList.complete = !todoList.complete;\n    setToDoList(copy);\n  }\n\n  // Function clears the completed items from the todoList\n  function handleClearCompleted() {\n    // alert(\"Button Clicked\");\n    const uncompletedToDos = toDoList.filter(todo => !todo.complete);\n    setToDoList(uncompletedToDos);\n  }\n\n \n\n  function handleCreateUserButtonClick() {\n    alert(\"clicked\")\n  }\n  \n  if (!loggedIn) {\n    return (\n      <Login\n        handleUserNameChange={handleUserNameChange}\n        handlePasswordChange={handlePasswordChange}\n        handleCreateUserButtonClick={handleCreateUserButtonClick}\n        handleLoginButtonClick={handleLoginButtonClick}\n      />\n    )\n  } else {\n    return (  \n      <div className='todoListDiv'>\n          <Header />\n          \n          <ToDoInput addTask={addTask}/>\n          <button onClick={handleClearCompleted}>Clear Completed</button>\n          <ToDoList toDoList={toDoList} toggleToDo={toggleToDo}/>\n      </div>\n    )\n  }\n};\n\nexport default App;\n*/\n// I used this youtube video: https://www.youtube.com/watch?v=hQAHSlTtcmY : \"Learn React in 30 minutes\" by Web Dev simplified\n// and this https://www.educative.io/blog/react-hooks-tutorial-todo-list react hooks todolist blog to assist me in this task"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAO,kCAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;;AAIA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;EAC1BM,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BC,IAA1B,CAA+B,IAA/B,CAA5B;IACA,KAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;IACA,KAAKE,2BAAL,GAAmC,KAAKA,2BAAL,CAAiCF,IAAjC,CAAsC,IAAtC,CAAnC;IACA,KAAKG,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BH,IAA5B,CAAiC,IAAjC,CAA9B;IACA,KAAKI,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BJ,IAA1B,CAA+B,IAA/B,CAA5B;IACA,KAAKK,KAAL,GAAa;MACXC,KAAK,EAAE,IADI;MAEXC,QAAQ,EAAE,EAFC;MAGXC,QAAQ,EAAE,EAHC;MAIXC,KAAK,EAAE,EAJI;MAKXC,QAAQ,EAAE;IALC,CAAb;EAOD;;EAIDC,MAAM,GAAG;IACP,oBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAGD;;AAvByB;;AA0B5B,eAAef,GAAf},"metadata":{},"sourceType":"module"}